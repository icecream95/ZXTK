#ifndef ZXTK_MISC_ZXTK_CONFIG_INCLUDE_GUARD
#define ZXTK_MISC_ZXTK_CONFIG_INCLUDE_GUARD

/*! \file zxtk_config.hpp.in
    \brief Provides zxtk config and versioning information

    This file defines major, minor and update versioning information and whether
        zxtk was compiled with SDL, constexpr endainness, correct timing, fast
        mode and multiple threads.
*/

#include <string>

#define ZXTK_VERSION_MAJOR @ZXTK_VERSION_MAJOR@
#define ZXTK_VERSION_MINOR @ZXTK_VERSION_MINOR@
#define ZXTK_VERSION_UPDATE @ZXTK_VERSION_UPDATE@
#define ZXTK_VERSION "@ZXTK_VERSION@"

namespace zxtk {
    namespace version {
        constexpr int major = @ZXTK_VERSION_MAJOR@;
        constexpr int minor = @ZXTK_VERSION_MINOR@;
        constexpr int update = @ZXTK_VERSION_UPDATE@;
        const std::string version = "@ZXTK_VERSION@";
    }
}


/*! \fn constexpr int zxtk_implemenation_stuff_c_strcmp( char const* lhs, char const* rhs )
  Unfortunately, this has to be in the global namespace due to a limitation with preprocessor directives
*/
constexpr int zxtk_implemenation_stuff_c_strcmp( char const* lhs, char const* rhs )
{
    return (('\0' == lhs[0]) && ('\0' == rhs[0])) ? 0
    :  (lhs[0] != rhs[0]) ? (lhs[0] - rhs[0])
    : zxtk_implemenation_stuff_c_strcmp( lhs+1, rhs+1 );
}


#if @ZXTK_USING_SDL_TRUE@ == 1
#define ZXTK_USING_SDL_TRUE
#endif

#if @ZXTK_ENDIANNESS_CONST_CFG@ == 1
#define ZXTK_ENDIANNESS_COMPILE_TIME_CHECK
#endif

#if @ZXTK_CORRECT_TIMING_CFG@ == 1
#define ZXTK_Z80_CORRECT_TIMING
#endif

#if @ZXTK_Z80_FASTEST_CFG@ == 1
#define ZXTK_Z80_FASTEST
#ifdef ZXTK_Z80_CORRECT_TIMING
#pragma message "Undefining ZXTK_Z80_CORRECT_TIMING option"
#endif
#undef ZXTK_Z80_CORRECT_TIMING
#endif

#if @ZXTK_MULTI_THREADS_CFG@ == 1
#define ZXTK_THREADS_TRUE
#endif

#endif
